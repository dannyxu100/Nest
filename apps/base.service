const $ = global.$;

class BaseService {
    constructor(Model) {
        this.Model = Model;
    }


    fail(err) {
        $.error(`BaseService Error: ${err.message}`);
        let res = {
            'result': false,
            'code': 0,
            'message': '',
            'description': ''
        };
        if (err.message.indexOf('duplicate key error') !== -1) {
            res.code = -100;
            res.message = '相同的记录已存在';
        } else if (err.message.indexOf('Cast to ObjectId failed for value') !== -1) {
            res.code = -200;
            res.message = 'id值无效';
        } else {
            res.code = err.code || -300;
            res.message = err.message;
        }
        res.description = err.message;
        return res;
    }

    success(res) {
        return {
            'result': true,
            'data': res
        };
    }

    create(obj) {
        return new Promise((resolve, reject) => {
            let entity = new this.Model(obj);
            this.Model.create(entity, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    save(obj) {
        return new Promise((resolve, reject) => {
            let entity = new this.Model(obj);
            entity.save((err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    update(condition, updater) {
        return new Promise((resolve, reject) => {
            this.Model.update(condition, updater, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    remove(condition) {
        return new Promise((resolve, reject) => {
            this.Model.remove(condition, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    findAll(condition, constraints) {
        return new Promise((resolve, reject) => {
            this.Model.find(condition, constraints || null, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    findOne(condition, constraints) {
        return new Promise((resolve, reject) => {
            this.Model.findOne(condition, constraints || null, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    findOneByOrder(condition, orderColumn, orderType) {
        return new Promise((resolve, reject) => {
            this.Model.findOne(condition).sort({
                [orderColumn]: orderType
            }).exec(function (err, res) {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }
}

module.exports = BaseService;
