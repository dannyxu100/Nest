const $ = global.$;

class BaseService {
    constructor(Model) {
        this.Model = Model;
    }

    /* async create(obj) {
        let entity = new this.Model(obj);
        this.Model.create(entity, (error, result) => {
            if (error) {
                $.error('create error--> ', error);
                return error;
            } else {
                $.log('create result--> ', result);
                return result;
            }
        });
    } */

    create(obj) {
        return new Promise((resolve, reject) => {
            let entity = new this.Model(obj);
            this.Model.create(entity, (error, result) => {
                if (error) {
                    $.error('create error--> ', error);
                    reject(error);
                } else {
                    $.log('create result--> ', result);
                    resolve(result);
                }
            });
        });
    }

    async save(obj) {
        let entity = new this.Model(obj);
        entity.save((error, result) => {
            if (error) {
                $.error('save error--> ', error);
            } else {
                $.log('save result--> ', result);
            }
        });
    }

    async update(condition, updater) {
        this.Model.update(condition, updater, (error, results) => {
            if (error) {
                $.error('update error--> ', error);
            } else {
                $.log('update results--> ', results);
            }
        });
    }

    async remove(condition) {
        this.Model.remove(condition, (error, result) => {
            if (error) {
                $.error('remove error--> ', error);
            } else {
                $.log('remove result--> ', result);
            }
        });
    }

    async findAll(condition, constraints) {
        this.Model.find(condition, constraints || null, (error, results) => {
            if (error) {
                $.error('findAll error--> ', error);
            } else {
                $.log('findAll results--> ', results);
            }
        });
    }

    async findOne(condition, constraints) {
        this.Model.findOne(condition, constraints || null, (error, results) => {
            if (error) {
                $.error('findOne error--> ', error);
            } else {
                $.log('findOne results--> ', results);
            }
        });
    }

    async findOneByOrder(condition, orderColumn, orderType) {
        this.Model.findOne(condition).sort({
            [orderColumn]: orderType
        }).exec(function (error, record) {
            if (error) {
                $.error('findOneByOrder error--> ', error);
            } else {
                $.error('findOneByOrder results--> ', record);
            }
        });
    }
}

module.exports = BaseService;
