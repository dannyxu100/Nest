const $ = global.$;

class BaseService {
    constructor(Model) {
        this.Model = Model;
    }

    handlefail(err) {
        $.error(`BaseService error--> ${err.message}`);
        if (err.message.indexOf('duplicate key error') !== -1) {
            return '用户已存在';
        }
        return err.message;
    }

    create(obj) {
        return new Promise((resolve, reject) => {
            let entity = new this.Model(obj);
            this.Model.create(entity, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(res);
                }
            });
        });
    }

    save(obj) {
        return new Promise((resolve, reject) => {
            let entity = new this.Model(obj);
            entity.save((err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(res);
                }
            });
        });
    }

    update(condition, updater) {
        return new Promise((resolve, reject) => {
            this.Model.update(condition, updater, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(res);
                }
            });
        });
    }

    remove(condition) {
        return new Promise((resolve, reject) => {
            this.Model.remove(condition, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(res);
                }
            });
        });
    }

    findAll(condition, constraints) {
        return new Promise((resolve, reject) => {
            this.Model.find(condition, constraints || null, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(res);
                }
            });
        });
    }

    findOne(condition, constraints) {
        return new Promise((resolve, reject) => {
            this.Model.findOne(condition, constraints || null, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(res);
                }
            });
        });
    }

    findOneByOrder(condition, orderColumn, orderType) {
        return new Promise((resolve, reject) => {
            this.Model.findOne(condition).sort({
                [orderColumn]: orderType
            }).exec(function (err, res) {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(res);
                }
            });
        });
    }
}

module.exports = BaseService;
