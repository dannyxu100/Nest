const $ = global.$;

class BaseService {
    constructor(Model) {
        this.Model = Model;
        this.doc = null;
    }

    createDoc(obj) {
        return this.doc = new this.Model(obj);
    }

    fail(err) {
        $.error(`BaseService Error: ${err.message}`);
        let matchs, res;
        res = {
            'result': false,
            'code': 0,
            'message': '',
            'description': ''
        };
        // if (err.message.indexOf('duplicate key error') !== -1) {
        if (matchs = err.message.match(/(.*) duplicate key error (.*) index: (.*)_(.*)\{ : \\?"(.*)\\?" \}/)) {
            res.code = -100;
            res.message = '相同的记录已存在：' + matchs[5];
        // } else if (err.message === 'Argument passed in must be a single String of 12 bytes or a string of 24 hex' || err.message.indexOf('Cast to ObjectId failed for value') !== -1) {
        } else if (matchs = err.message.match(/['12 bytes or a string of 24 hex','Cast to ObjectId failed for value']/)) {
            res.code = -200;
            res.message = 'id值无效';
        // } else if (err.message.indexOf('validation failed') !== -1) {
        } else if (matchs = err.message.match(/(.*) validation failed: (.*): (.*)/)) {
            res.code = -202;
            res.message = matchs[3];
        } else {
            res.code = err.code || -300;
            res.message = err.message;
        }
        res.description = err.message;
        return res;
    }

    success(res, type) {
        switch (type) {
        case 'find':
            return;
        case 'create':
            return;
        case 'remove':
            return {
                'result': true,
                'data': {
                    'success': res.n
                }
            };
        case 'update':
            return {
                'result': true,
                'data': {
                    'total': res.n,
                    'success': res.nModified
                }
            };
        default:
            return {
                'result': true,
                'data': res
            };
        }
    }

    create(obj) {
        return new Promise((resolve, reject) => {
            this.Model.create(this.createDoc(obj), (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    save(obj) {
        return new Promise((resolve, reject) => {
            this.createDoc(obj).save((err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    update(condition, newObj) {
        return new Promise((resolve, reject) => {
            this.Model.update(condition, newObj, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    updateById(id, newObj) {
        return new Promise((resolve, reject) => {
            this.Model.update({
                '_id': id
            }, newObj, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    if (res.n === 0) {
                        reject(this.fail({ 'message':'没有找到满足条件的记录' }));
                    } else if (res.nModified === 0) {
                        reject(this.fail({ 'message':'没有更新项' }));
                    } else {
                        resolve(this.success(res, 'update'));
                    }
                }
            });
        });
    }

    remove(condition) {
        return new Promise((resolve, reject) => {
            this.Model.remove(condition, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    removeById(id) {
        return new Promise((resolve, reject) => {
            this.Model.deleteOne({
                '_id': id
            }, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    if (res.n === 0) {
                        reject(this.fail({ 'message':'删除失败，没有找到满足条件的记录' }));
                    } else {
                        resolve(this.success(res, 'remove'));
                    }
                }
            });
        });
    }

    findAll(condition, constraints) {
        return new Promise((resolve, reject) => {
            this.Model.find(condition, constraints || null, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    findById(id, constraints) {
        return new Promise((resolve, reject) => {
            this.Model.findById(id, constraints || null, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    findOne(condition, constraints) {
        return new Promise((resolve, reject) => {
            this.Model.findOne(condition, constraints || null, (err, res) => {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }

    findOneByOrder(condition, orderColumn, orderType) {
        return new Promise((resolve, reject) => {
            this.Model.findOne(condition).sort({
                [orderColumn]: orderType
            }).exec(function (err, res) {
                if (err) {
                    reject(this.fail(err));
                } else {
                    resolve(this.success(res));
                }
            });
        });
    }
}

module.exports = BaseService;
