const $         = global.$;
const Schema    = $.mongoose.Schema;

const UsersSchema = new Schema({
    'name': {
        'type': String,
        'required': [true, '用户名称不能为空'],
        'minlength': [2, '用户名称不能小于2个字符'],
        'maxlength': [30, '用户名称不能大于30个字符'],
        'unique': true
    },
    'phone': {
        'type': String,
        'required': [true, '手机号码不能为空'],
        'minlength': [11, '手机号码应该为11位'],
        'maxlength': [11, '手机号码应该为11位'],
        'unique': true
    },
    // 密码加密后存入数据库，没有做长度限制
    'password': {
        'type': String,
        'required': [true, '密码不能为空']
    }
}, {
    'timestamps': {
        'createdAt': 'created_date',
        'updatedAt': 'updated_date'
    },
    'versionKey': false
});


UsersSchema.pre('save', async function (next) {
    // $.msg('save');
    if (this.password) {
        this.password = await $.bcrypt(this.password);
    }
    next();
});
UsersSchema.pre('updateOne', async function (next) {
    // $.msg('update');
    if (this._update.password) {
        this._update.password = await $.bcrypt(this._update.password);
    }
    next();
});
UsersSchema.pre('update', async function (next) {
    // $.msg('update');
    if (this._update.password) {
        this._update.password = await $.bcrypt(this._update.password);
    }
    next();
});
UsersSchema.pre('updateMany', async function (next) {
    // $.msg('update');
    if (this._update.password) {
        this._update.password = await $.bcrypt(this._update.password);
    }
    next();
});

module.exports = UsersSchema;
